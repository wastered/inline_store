import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink

from data.config import channel, ADMINS
from filters import WithoutAuthorization, Authentication
from keyboards.default import get_access
from keyboards.inline.menu_keyboard import buttons
from loader import dp, bot
from utils.db_api import commands
from utils.misc import subscription


@dp.message_handler(Authentication(), CommandStart(deep_link=re.compile('[0-9_]+')))
async def connect_user(message: types.Message, item_id=0):
    arg = message.get_args().split('_')[1] if item_id == 0 else item_id
    item = await commands.get_item_id(arg)

    if item.quantity > 0:
        await message.answer_photo(photo=item.photo, caption=f"<b>{item.name}</b>\n"
                                                             f"<b>–í –Ω–∞–ª–∏—á–∏–∏</b> - {item.quantity} —à—Ç.\n"
                                                             f"<b>–¶–µ–Ω–∞</b> - {item.price:,}‚ÇΩ\n\n"
                                                             f"{item.description}",
                                   reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [
                                               InlineKeyboardButton(
                                                   text='–ö—É–ø–∏—Ç—å',
                                                   callback_data=f"buy:{item.id}"
                                               )
                                           ],
                                           [
                                               InlineKeyboardButton(
                                                   text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query=item.name
                                               )
                                           ]
                                       ]
                                   ))


@dp.message_handler(CommandStart(deep_link=re.compile('[\w\W]+')))
async def ref_start(message: types.Message):
    referrer = message.get_args().split('_')
    
    # –¥–ª—è –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –º–æ–¥
    if int(referrer[0]) == message.from_user.id:
        if await subscription.check(user_id=message.from_user.id, channel=channel) or \
                str(message.from_user.id) in ADMINS:
            await commands.add_user(user_id=message.from_user.id,
                                    full_name=message.from_user.full_name,
                                    username=message.from_user.username)
            if len(referrer) > 1:
                await connect_user(message)
            else:
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}.\n –¢—ã –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!ü•≥ \n"
                                     "–ü—Ä–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info",
                                     reply_markup=buttons)
        
        else:
            if len(referrer) > 1:
                await commands.storage_item(message.from_user.id, referrer[1])
            await empty_start(message)
    
    # –¥–ª—è –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –¥–∏–ø–ª–∏–Ω–∫—É –¥—Ä—É–≥–∞
    elif await commands.select_user(int(referrer[0])):
        await commands.add_user(user_id=message.from_user.id,
                                full_name=message.from_user.full_name,
                                username=message.from_user.username)
        await commands.add_referrer(referrer_id=referrer[0], user_id=message.from_user.id)
        await commands.update_point(user_id=referrer[0])
        
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! \n'
            f'–¢—ã –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!ü•≥ \n'
            f'–ü—Ä–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info', reply_markup=buttons)
        
        if len(referrer) > 1:
            await connect_user(message)
    else:
        await message.answer("–ù–µ—Ä–∞–±–æ—á–∞—è DeepLink —Å—Å—ã–ª–∫–∞!\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")


@dp.message_handler(WithoutAuthorization(), CommandStart())
async def empty_start(message: types.Message):
    if await subscription.check(user_id=message.from_user.id, channel=channel):
        await commands.add_user(user_id=message.from_user.id,
                                full_name=message.from_user.full_name,
                                username=message.from_user.username)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
                             '–ü—Ä–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info', reply_markup=buttons)
        return
    
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
                         f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ª–∏–±–æ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."
                         f"\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç  –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n",
                         reply_markup=get_access.invite
                         )


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞', state='*')
async def cancel_button(message: types.Message, state):
    link = await bot.export_chat_invite_link(chat_id=channel)
    await message.answer(text=f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n"
                              f"‚ñ™Ô∏è–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
                              f"‚ñ™Ô∏è–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {hlink('–∫–∞–Ω–∞–ª', url=link)}\n"
                              f"‚ñ™Ô∏è–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                         reply_markup=get_access.invite)
    await state.finish()


@dp.message_handler(text="–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", state=None)
async def give_invite(message: types.Message, state: FSMContext):
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
                         reply_markup=get_access.cancel)
    
    await state.set_state('code')


@dp.message_handler(state='code')
async def state_code(message: types.Message, state: FSMContext):
    answer = message.text
    
    if await commands.get_code(answer) is not None:
        await commands.add_user(user_id=message.from_user.id,
                                full_name=message.from_user.full_name,
                                username=message.from_user.username)
        
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—éüéâ\n–í—ã –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!",
                             reply_markup=ReplyKeyboardRemove())
        await message.answer('–ü—Ä–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info', reply_markup=buttons)
        await state.finish()
        try:
            item_id = await commands.get_storage_item(message.from_user.id)
            await commands.delete_storage_item(message.from_user.id)

            await connect_user(message, item_id)
        except AttributeError:
            return
    
    else:
        await message.answer(f'–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n'
                             f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Cancel',
                             reply_markup=get_access.cancel)


@dp.message_handler(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", state=None)
async def give_invite(message: types.Message, state: FSMContext):
    link = await bot.export_chat_invite_link(chat_id=channel)
    await message.answer(f'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {hlink("–∫–∞–Ω–∞–ª", url=link)}\n'
                         f'–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start\n'
                         f'–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–∂–º–∏—Ç–µ Cancel',
                         reply_markup=get_access.cancel)
    
    await state.set_state('channel')


@dp.message_handler(state='channel')
async def state_channel(message: types.Message, state: FSMContext):
    if await subscription.check(user_id=message.from_user.id, channel=channel) or \
                str(message.from_user.id) in ADMINS:
        await commands.add_user(user_id=message.from_user.id,
                                full_name=message.from_user.full_name,
                                username=message.from_user.username)
        
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—éüéâ\n–í—ã –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ü—Ä–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info', reply_markup=buttons)
        await state.finish()
        
        try:
            item_id = await commands.get_storage_item(message.from_user.id)
            await commands.delete_storage_item(message.from_user.id)

            await connect_user(message, item_id)
        except AttributeError:
            return
    else:
        link = await bot.export_chat_invite_link(chat_id=channel)
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n"
                             f'{hlink("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", url=link)}\n'
                             f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞",
                             reply_markup=get_access.cancel)
